#########################
nmap 
#########################

run from admin cmd.exe (not ps)

nmap.exe -p0- -Pn -n -T5 -vvv -T5 10.0.0.15 -oN nmap_egress


scanner_nmap.bat 192.168.90.0/24 

# port scan

nmap.exe -vvv -T5 -n -sP -oA nmap_ping <network/sn>


# port scan TCP top 50 (no ping)

nmap.exe -vvv --min-rate 400 --min-parallelism 200 --min-hostgroup=257 -Pn -n -T4 --open -p 21-23,25-26,53,80-81,110-111,113,134-139,143,179,199,443,445,465,512-515,548,554,587,993,995,1025-1026,1433,1434,1720,1723,2000-2001,2049,3306,3389,5060,5432,5900,5901,6001,8000,8080,8081,8443,8888,10000,15432,32768,49152 -oA nmap_tcp_noping <target network/24>


# port scan UDP top 10 (no ping)

nmap.exe -vvv --min-rate 400 --min-parallelism 100 --min-hostgroup=257 -Pn -sU -n -T4 --open -p53,67,123,135,137-138,161,445,631,1434 -oA nmap_udp_noping <network/sn>


# port scan TCP full ports 

nmap.exe -vvv --min-rate 400 --min-parallelism 100 --min-hostgroup=257 -sT -n -T4 -p- -oA nmap_tcp_full <network/sn>


# Discover open nmap ports /24, top50 ports .. 2-4mins

nmap.exe -vvv --min-rate 400 --min-parallelism 100 --min-hostgroup=257 -Pn -n -T4 --open -p 21-23,25-26,53,80-81,110-111,113,134-139,143,179,199,443,445,465,514-515,548,554,587,993,995,1025-1026,1433,1720,1723,2000-2001,2049,3306,3389,5060,5432,5900,6001,8000,8080,8081,8443,8888,10000,15432,32768,49152 -oA nmap_disc <target>






#########################
NimScan
#########################

!!! use COMMAND prompt

NimScan.exe 10.0.0.15 -v -i -o






#########################
Grip
#########################

!!! use COMMAND prompt

grip.exe 192.168.0.1/24 file=grip.txt

grip.exe sockets=300 21,22,23,25,26,53,80-81,110,111,113,134-139,143,179,199,443,445,465,512-515,548,554,587,993,995,1025-1026,1433,1434,1720,1723,2000-2001,2049,3306,3389,5060,5432,5900,5901,6001,8000,8080,8081,8443,8888,10000,15432,32768,49152 192.168.0.0/24 file=grip.txt

grip.exe sockets=200 80,445,3389,5985,445,22,21,23,25,53,110,111,135,512,513,514,2049,5432,1443,3306,5900,8080,8081 192.168.0.0/24 file=grip2.txt













#########################
ScanLine - Foundstone 
#########################

!!! use COMMAND prompt


# Ping a range 

sl.exe -n 192.168.0.11-192.168.0.255

# Ping range - output to targets.txt

sl.exe -n 192.168.0.11-192.168.0.255 |Select-String -Pattern "\d{1,3}(\.\d{1,3}){3}" findstr /v "Adding IP range"  | Tee targets.txt

# Scan all 65k TCP Ports - super fast 20ms timeout 

sl.exe 10.0.0.15 -t 1-65535 -c 20 -v


sl.exe 192.168.80.1-255 -t 3389,445












#########################
CMD
##########################

# Ping Sweep

for /L %i in (1,1,255) do @ping -n 1 -w 200 192.168.1.%i | FIND /i "Reply"

set "NET=192.168.0" && for /l %i in (1,1,254) do @ping -n 1 -w 100 %NET%.%i  | FIND /i "Reply"











#########################
Powershell
#########################

# Ping Sweep

$NET="192.168.0";1..255 | % {ping -n 1 -w 100 "$NET.$_" | Select-String ttl}




$NET="192.168.0";for($i=1;$i -lt 255;$i++){$command="ping -n 1 -w 100 $NET.$i > nul 2>&1 && echo $NET.$i";start-process -nonewwindow cmd -argumentlist "/c $command" -redirectstandardoutput "tmp$i.txt"};cat tmp*.txt | tee sweep.txt


(1..254) | % {$ip="192.168.0.$_"; Write-output "$IP  $(test-connection -computername "$ip" -quiet -count 1)"}


echo "[*] Scanning in progress...";1..254 |ForEach-Object {Get-WmiObject Win32_PingStatus -Filter "Address='10.10.100.$_' and Timeout=50 and ResolveAddressNames='false' and StatusCode=0" |select ProtocolAddress* |Out-File -Append -FilePath .\sweep.txt};echo "[+] Live hosts:"; Get-Content -Path .\sweep.txt | ? { $_ -match "10.10.100" }; echo "[*] Done.";del .\sweep.txt

# PowerShell >= 7 

1..65335 | % -ThrottleLimit 500 -Parallel {write-host ((new-object Net.Sockets.TcpClient).Connect("192.168.1.5",$_)) "Port $_ is open!"} 2>$null


# Check Ports individually 

Test-NetConnection -ComputerName 192.168.1.1 -Port 443
Test-NetConnection -ComputerName hostname -Port 443


(New-Object System.Net.Sockets.TcpClient).Connect(‘ny-msg01’, 25)


# Ping Sweep - Check OS from TTL 

$IP="192.168.0";1..255 | % { $a = $_; ping -n 1 -w 10 "$IP.$a" | select-string TTL | % { if ($_ -match "ms") { $ttl = $_.line.split('=')[3] -as [int]; if ($ttl -lt 65) { $os = "Linux" } ElseIf ($ttl -gt 64 -And $ttl -lt 129) { $os = "Windows" } else { $os = "SomethingElse"}; write-host "$IP.$a OS: $os TTL: $ttl"; echo "$IP.$a" >> scan_results.txt }}}



# Port Scan - Using Test-NetConnection.. Single Host


$PORTS="80,443,3389,5985,445,22,21,23,53,110,111,135,139,512,513,514,2049,5432,1443,3306,5432,15432,5900,8080"
$lists = $PORTS.split(“,”);
foreach($port in $lists){ 
Test-NetConnection 192.168.0.1 -Port $port 
}














#########################
port-scanner-go-win
#########################

use COMMAND prompt - set the PORTS and IP (first 3 octects) variables first 

set "PORTS=80,443,3389,5985,445,22,21,23,25,53,110,111,135,139,512,513,514,2049,5432,1443,3306,5900,8080,8081"
set "IP=192.168.0"
for /L %i in (1,1,255) do @echo %IP%.%i && port-scanner-go-win.exe --ip %IP%.%i --port %PORTS%  







#########################
port-scan-tcp-compat.ps1
#########################

Import-Module port-scan-tcp-compat.ps1

port-scan-tcp 10.10.0.1 137
port-scan-tcp 10.10.0.1 (135,137,445)
port-scan-tcp (gc .\ips.txt) 137
port-scan-tcp (gc .\ips.txt) (135,137,445)
0..255 | foreach { port-scan-tcp 10.10.0.$_ 137 }
0..255 | foreach { port-scan-tcp 10.10.0.$_ (135,137,445) }









#########################
PSnmap
#########################
Import-Module .\PSnmap.psm1

# Ping 

Invoke-PSnmap 192.168.0.0/24

$target="192.168.0.0/24"
$(Invoke-PSnmap $target| findstr True |Select-String -Pattern "\d{1,3}(\.\d{1,3}){3}" -AllMatches).Matches.Value | Tee targets.txt





#########################
NBTScan
#########################

.\nbtscan-1.0.35.exe 192.168.80.0/24










#########################
Ping-IPRange.ps1
#########################

Import-Module .\Ping-IPRange.ps1

Ping-IPRange 192.168.0.1 192.168.0.255
 
$(Ping-IPRange 192.168.0.1 192.168.0.255 |Select-String -Pattern "\d{1,3}(\.\d{1,3}){3}" -AllMatches).Matches.Value | Tee targets.txt
 
 
 
 
 
 
 
 
 
 
#########################
aping 
#########################
 .\aping.exe 192.168.0.0/24
  
$target="192.168.0.0/24"
$($(.\aping.exe 192.168.0.0/24) -Split ' ' |findstr.exe /v \/ |Select-String -Pattern "\d{1,3}(\.\d{1,3}){3}" -AllMatches).Matches.Value | Tee targets.txt






#########################
arp-scan
#########################
.\arp-scan.exe -t 192.168.0.0/24 

$target="192.168.0.0/24"
$(.\arp-scan.exe -t 192.168.0.0/24 |Select-String -Pattern "\d{1,3}(\.\d{1,3}){3}" -AllMatches).Matches.Value | Tee targets.txt












#########################
IPv4PortScan.ps1
#########################

.\IPv4PortScan.ps1 -ComputerName fritz.box -EndPort 500






#########################
Ladon 
#########################

# ICMP

.\Ladon.exe 192.168.0.0/24 icmp


# Port Scan

Ladon 192.168.1.8/24 PortScan
Ladon 192.168.1.8 PortScan 80,445,3389

$PORTS="80,443,3389,5985,445,22,21,23,53,110,111,135,139,512,513,514,2049,5432,1443,3306,5432,15432,5900,8080"
.\Ladon 192.168.0.0/24 PortScan $PORTS




#########################
TCPPing
#########################

.\tcping.exe 192.168.0.2 80
.\tcping.exe 192.168.0.2 5432






#########################
nc 
#########################

# scan single host

nc.exe -nv 192.168.0.22 1433

.\nc.exe -zvn 192.168.0.1 21 25 22 80 53 3389 445 443 1433 2433 3396 5432 15432 2049 5985 111 389 8443 8080 8081


!!! These loops are very slow  !!!

# cmd loop - nc sweep 0..255 and scan it for ports 

for /L %i in (1,1,255) do .\nc.exe -zvn  192.168.0.%i 80 443 3389 5985 445 22 21 23 53 110 111 135 139 512 513 514 2049 5432 1443 3306 5900 8080 8081 


# Powershell loop nc sweep 0.255

for ($i=0; $i -le 256; $i++) {.\nc.exe -nvz 192.168.0.$i 80 443 3389 5985 445 22 21 23 53 110 111 135 139 512 513 514 2049 5432 1443 3306 5900 8080 8081}
